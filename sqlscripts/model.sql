-- Create schemtas

-- DROP ALL TABLE
/*
DROP TABLE IF EXISTS RECIPE_STEP_SUCCESSFUL
DROP TABLE IF EXISTS PHOTO_OF_USER
DROP TABLE IF EXISTS PHOTO_OF_INGREDIENT
DROP TABLE IF EXISTS ADMINISTRATOR
DROP TABLE IF EXISTS PHOTO_IN_RECIPE
DROP TABLE IF EXISTS LEVEL
DROP TABLE IF EXISTS NOTE
DROP TABLE IF EXISTS COMMENT
DROP TABLE IF EXISTS TAG_TO_RECIPE
DROP TABLE IF EXISTS RECIPE_STEP
DROP TABLE IF EXISTS PHOTO
DROP TABLE IF EXISTS INGREDIENT_IN_RECIPE
DROP TABLE IF EXISTS TAG_TO_INGREDIENT
DROP TABLE IF EXISTS RECIPE
DROP TABLE IF EXISTS TASTE
DROP TABLE IF EXISTS TAG
DROP TABLE IF EXISTS INGREDIENT
DROP TABLE IF EXISTS MEMBER
*/

-- Create types
CREATE TYPE TAG_TYPE AS ENUM ('Origine','Type de nourriture','Saveur');

CREATE TYPE UNIT_OF_MEASUREMENT AS ENUM ('gramme','millilitre','nombre');

/*
devenu inutile depuis que difficulty est un nombre.
CREATE TYPE DIFFICULTY AS ENUM ('Facile','Moyen','Difficile')
*/
CREATE TYPE ADMIN_RANK AS ENUM ('Administrateur','Moderateur');

CREATE TYPE DISH_TYPE AS ENUM ('Dessert','Entree','Plat');

CREATE TYPE GENDER AS ENUM ('M','F','U');

-- Create tables
CREATE TABLE IF NOT EXISTS MEMBER
(
    ID_MEMBER SERIAL NOT NULL UNIQUE,
    USERNAME VARCHAR(255) NOT NULL UNIQUE,
    FIRSTNAME VARCHAR(255),
    LASTNAME VARCHAR(255),
    EMAIL VARCHAR(255) NOT NULL UNIQUE,
    PASSWORD VARCHAR(255),
    EXPERIENCE INTEGER DEFAULT 0 NOT NULL,
    LEVEL INTEGER DEFAULT 1 NOT NULL,
    SALT VARCHAR(255),
    GENDER GENDER,
    DISABLED BOOLEAN DEFAULT false NOT NULL,
    BIRTHDAY DATE,
    CITY VARCHAR(255),
    CURRENT_AVATAR INTEGER,
    CREATION_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    MODIF_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    PRIMARY KEY(ID_MEMBER)
);

CREATE TABLE IF NOT EXISTS INGREDIENT
(
    ID_INGREDIENT SERIAL NOT NULL UNIQUE,
    NAME VARCHAR(255) NOT NULL UNIQUE,
    DESCRIPTION TEXT,
    CREATION_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    MODIF_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    VALIDATION BOOLEAN DEFAULT false NOT NULL,
    DISABLED BOOLEAN DEFAULT false NOT NULL,
    PRIMARY KEY(ID_INGREDIENT)
);

CREATE TABLE IF NOT EXISTS TAG
(
    ID_TAG SERIAL NOT NULL UNIQUE,
    NAME VARCHAR(255) NOT NULL UNIQUE,
    TAG_TYPE TAG_TYPE,
    CREATION_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    PRIMARY KEY(ID_TAG)
);

CREATE TABLE IF NOT EXISTS TASTE
(
    ID_TASTE SERIAL NOT NULL UNIQUE,
    FK_ID_MEMBER INTEGER NOT NULL,
    FK_ID_INGREDIENT INTEGER NOT NULL,
    GRADING INTEGER DEFAULT 0 NOT NULL,
    CREATION_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    MODIF_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    PRIMARY KEY(ID_TASTE)
);

CREATE TABLE IF NOT EXISTS RECIPE
(
    ID_RECIPE SERIAL NOT NULL UNIQUE,
    NAME VARCHAR(255) NOT NULL,
    DESCRIPTION TEXT,
    PREPARATION_TIME INTEGER,
    COOKING_TIME INTEGER,
    FK_CREATOR INTEGER NOT NULL,
    DISH_TYPE DISH_TYPE,
    DIFFICULTY INTEGER DEFAULT 0 NOT NULL,
    DRAFT BOOLEAN DEFAULT true NOT NULL,
    CREATION_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    MODIF_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    VALIDATION BOOLEAN DEFAULT false NOT NULL,
    VALIDATOR INTEGER,
    DISABLED BOOLEAN DEFAULT false NOT NULL,
    EXPERIENCE_VAL INTEGER DEFAULT 0 NOT NULL,
    PRIMARY KEY(ID_RECIPE)
);

CREATE TABLE IF NOT EXISTS TAG_TO_INGREDIENT
(
    ID_TAG_TO_INGREDIENT SERIAL NOT NULL UNIQUE,
    FK_ID_TAG INTEGER,
    FK_ID_INGREDIENT INTEGER,
    CREATION_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    PRIMARY KEY(ID_TAG_TO_INGREDIENT)
);

CREATE TABLE IF NOT EXISTS INGREDIENT_IN_RECIPE
(
    ID_INGREDIENT_IN_RECIPE SERIAL NOT NULL UNIQUE,
    FK_ID_INGREDIENT INTEGER NOT NULL,
    FK_ID_RECIPE INTEGER NOT NULL,
    QUANTITY INTEGER NOT NULL,
    MEASUREMENT UNIT_OF_MEASUREMENT NOT NULL,
    PRIMARY KEY(ID_INGREDIENT_IN_RECIPE)
);

CREATE TABLE IF NOT EXISTS PHOTO
(
    ID_PHOTO INTEGER NOT NULL UNIQUE,
    FK_ID_MEMBER INTEGER NOT NULL,
    FILE_PATH VARCHAR(255) NOT NULL,
    FILE_NAME VARCHAR(255) NOT NULL,
    TITLE VARCHAR(255),
    DESCRIPTION VARCHAR(1024),
    CREATION_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    DISABLED BOOLEAN DEFAULT false NOT NULL,
    PRIMARY KEY(ID_PHOTO)
);

CREATE TABLE IF NOT EXISTS RECIPE_STEP
(
    ID_RECIPE_STEP SERIAL NOT NULL UNIQUE,
    FK_ID_RECIPE INTEGER NOT NULL,
    RANK INTEGER,
    NAME VARCHAR(255) NOT NULL,
    DESCRIPTION TEXT,
    DURATION_TIME INTEGER,
    CREATION_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    MODIF_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    DISABLED BOOLEAN DEFAULT false NOT NULL,
    PRIMARY KEY(ID_RECIPE_STEP)
);

CREATE TABLE IF NOT EXISTS TAG_TO_RECIPE
(
    ID_TAG_TO_RECIPE SERIAL NOT NULL UNIQUE,
    FK_ID_TAG INTEGER NOT NULL,
    FK_ID_RECIPE INTEGER NOT NULL,
    CREATION_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    PRIMARY KEY(ID_TAG_TO_RECIPE)
);

CREATE TABLE IF NOT EXISTS COMMENT
(
    ID_COMMENT SERIAL NOT NULL UNIQUE,
    FK_ID_RECIPE INTEGER NOT NULL,
    FK_ID_MEMBER INTEGER NOT NULL,
    TITLE VARCHAR(255) NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    CREATION_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    MODIF_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    VALIDATION BOOLEAN DEFAULT false NOT NULL,
    VALIDATOR INTEGER,
    DISABLED BOOLEAN DEFAULT false NOT NULL,
    PRIMARY KEY(ID_COMMENT)
);

CREATE TABLE IF NOT EXISTS NOTE
(
    ID_NOTE SERIAL NOT NULL UNIQUE,
    FK_ID_MEMBER INTEGER,
    FK_ID_RECIPE INTEGER,
    FK_ID_COMMENT INTEGER NOT NULL UNIQUE,
    RATING INTEGER,
    SUCCESSFUL BOOLEAN DEFAULT false NOT NULL,
    CREATION_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    MODIF_DATE TIMESTAMP DEFAULT statement_timestamp() NOT NULL,
    PRIMARY KEY(ID_NOTE)
);

CREATE TABLE IF NOT EXISTS PHOTO_IN_RECIPE
(
    ID_PHOTO_IN_RECIPE SERIAL NOT NULL UNIQUE,
    FK_ID_RECIPE INTEGER NOT NULL,
    FK_ID_PHOTO INTEGER NOT NULL,
    FK_ID_COMMENT INTEGER,
    PRIMARY KEY(ID_PHOTO_IN_RECIPE)
);

CREATE TABLE IF NOT EXISTS ADMINISTRATOR
(
    ID_ADMINISTRATOR INTEGER NOT NULL UNIQUE,
    RANK ADMIN_RANK,
    PRIMARY KEY(ID_ADMINISTRATOR)
);

CREATE TABLE IF NOT EXISTS PHOTO_OF_INGREDIENT
(
    ID_PHOTO_OF_INGREDIENT SERIAL NOT NULL UNIQUE,
    FK_ID_INGREDIENT INTEGER,
    FK_ID_PHOTO INTEGER,
    PRIMARY KEY(ID_PHOTO_OF_INGREDIENT)
);

CREATE TABLE IF NOT EXISTS PHOTO_OF_USER
(
    ID_PHOTO_OF_USER INTEGER NOT NULL UNIQUE,
    PRIMARY KEY(ID_PHOTO_OF_USER)
);

CREATE TABLE IF NOT EXISTS RECIPE_STEP_SUCCESSFUL
(
    ID_RECIPE_STEP_SUCCESSFUL SERIAL NOT NULL UNIQUE,
    ID_MEMBER INTEGER NOT NULL,
    ID_RECIPE_STEP INTEGER NOT NULL,
    PRIMARY KEY(ID_RECIPE_STEP_SUCCESSFUL)
);

CREATE TABLE IF NOT EXISTS LEVEL
(
    ID_LEVEL SERIAL NOT NULL,
    LABEL_LVL VARCHAR(100) NOT NULL,
    LEVEL_PIC INTEGER NOT NULL,
    XP_MIN INTEGER NOT NULL,
    XP_MAX INTEGER NOT NULL,
    PRIMARY KEY(ID_LEVEL)
);

CREATE TABLE IF NOT EXISTS PHOTO_OF_LEVEL
(
    ID_PHOTO_OF_LEVEL INTEGER NOT NULL,
    PRIMARY KEY(ID_PHOTO_OF_LEVEL)
);

CREATE TABLE IF NOT EXISTS USTENSILE
(
    ID_USTENSILE SERIAL NOT NULL,
    LABEL_USTENSILE VARCHAR(255) NOT NULL,
    PRIMARY KEY(ID_USTENSILE)
);

CREATE TABLE IF NOT EXISTS USTENSILE_IN_RECIPE
(
    ID_USTENSILE_IN_RECIPE SERIAL NOT NULL,
    FK_ID_RECIPE SERIAL NOT NULL,
    FK_USTENSILE SERIAL NOT NULL,
    PRIMARY KEY(ID_USTENSILE_IN_RECIPE)
);


-- Create FKs
ALTER TABLE TASTE
    ADD    FOREIGN KEY (FK_ID_MEMBER)
    REFERENCES MEMBER(ID_MEMBER)
    MATCH SIMPLE
;
    
ALTER TABLE RECIPE
    ADD    FOREIGN KEY (FK_CREATOR)
    REFERENCES MEMBER(ID_MEMBER)
    MATCH SIMPLE
;
    
ALTER TABLE TASTE
    ADD    FOREIGN KEY (FK_ID_INGREDIENT)
    REFERENCES INGREDIENT(ID_INGREDIENT)
    MATCH SIMPLE
;
    
ALTER TABLE TAG_TO_INGREDIENT
    ADD    FOREIGN KEY (FK_ID_TAG)
    REFERENCES TAG(ID_TAG)
    MATCH SIMPLE
;
    
ALTER TABLE TAG_TO_INGREDIENT
    ADD    FOREIGN KEY (FK_ID_INGREDIENT)
    REFERENCES INGREDIENT(ID_INGREDIENT)
    MATCH SIMPLE
;
    
ALTER TABLE INGREDIENT_IN_RECIPE
    ADD    FOREIGN KEY (FK_ID_INGREDIENT)
    REFERENCES INGREDIENT(ID_INGREDIENT)
    MATCH SIMPLE
;
    
ALTER TABLE INGREDIENT_IN_RECIPE
    ADD    FOREIGN KEY (FK_ID_RECIPE)
    REFERENCES RECIPE(ID_RECIPE)
    MATCH SIMPLE
;
    
ALTER TABLE TAG_TO_RECIPE
    ADD    FOREIGN KEY (FK_ID_TAG)
    REFERENCES TAG(ID_TAG)
    MATCH SIMPLE
;
    
ALTER TABLE TAG_TO_RECIPE
    ADD    FOREIGN KEY (FK_ID_RECIPE)
    REFERENCES RECIPE(ID_RECIPE)
    MATCH SIMPLE
;
    
ALTER TABLE RECIPE_STEP
    ADD    FOREIGN KEY (FK_ID_RECIPE)
    REFERENCES RECIPE(ID_RECIPE)
    MATCH SIMPLE
;
    
ALTER TABLE COMMENT
    ADD    FOREIGN KEY (FK_ID_MEMBER)
    REFERENCES MEMBER(ID_MEMBER)
    MATCH SIMPLE
;
    
ALTER TABLE COMMENT
    ADD    FOREIGN KEY (FK_ID_RECIPE)
    REFERENCES RECIPE(ID_RECIPE)
    MATCH SIMPLE
;
    
ALTER TABLE NOTE
    ADD    FOREIGN KEY (FK_ID_RECIPE)
    REFERENCES RECIPE(ID_RECIPE)
    MATCH SIMPLE
;
    
ALTER TABLE NOTE
    ADD    FOREIGN KEY (FK_ID_MEMBER)
    REFERENCES MEMBER(ID_MEMBER)
    MATCH SIMPLE
;
    
ALTER TABLE NOTE
    ADD    FOREIGN KEY (FK_ID_COMMENT)
    REFERENCES COMMENT(ID_COMMENT)
    MATCH SIMPLE
;
    
ALTER TABLE PHOTO_IN_RECIPE
    ADD    FOREIGN KEY (FK_ID_RECIPE)
    REFERENCES RECIPE(ID_RECIPE)
    MATCH SIMPLE
;
    
ALTER TABLE PHOTO_IN_RECIPE
    ADD    FOREIGN KEY (FK_ID_COMMENT)
    REFERENCES COMMENT(ID_COMMENT)
    MATCH SIMPLE
;
    
ALTER TABLE PHOTO_IN_RECIPE
    ADD    FOREIGN KEY (FK_ID_PHOTO)
    REFERENCES PHOTO(ID_PHOTO)
    MATCH SIMPLE
;
    
ALTER TABLE ADMINISTRATOR
    ADD    FOREIGN KEY (ID_ADMINISTRATOR)
    REFERENCES MEMBER(ID_MEMBER)
    MATCH SIMPLE
;
    
ALTER TABLE RECIPE
    ADD    FOREIGN KEY (VALIDATOR)
    REFERENCES ADMINISTRATOR(ID_ADMINISTRATOR)
    MATCH SIMPLE
;
    
ALTER TABLE COMMENT
    ADD    FOREIGN KEY (VALIDATOR)
    REFERENCES ADMINISTRATOR(ID_ADMINISTRATOR)
    MATCH SIMPLE
;
    
ALTER TABLE PHOTO
    ADD    FOREIGN KEY (FK_ID_MEMBER)
    REFERENCES MEMBER(ID_MEMBER)
    MATCH SIMPLE
;
    
ALTER TABLE PHOTO_OF_INGREDIENT
    ADD    FOREIGN KEY (FK_ID_INGREDIENT)
    REFERENCES INGREDIENT(ID_INGREDIENT)
    MATCH SIMPLE
;
    
ALTER TABLE PHOTO_OF_INGREDIENT
    ADD    FOREIGN KEY (FK_ID_PHOTO)
    REFERENCES PHOTO(ID_PHOTO)
    MATCH SIMPLE
;
    
ALTER TABLE PHOTO_OF_USER
    ADD    FOREIGN KEY (ID_PHOTO_OF_USER)
    REFERENCES PHOTO(ID_PHOTO)
    MATCH SIMPLE
;
    
ALTER TABLE MEMBER
    ADD    FOREIGN KEY (CURRENT_AVATAR)
    REFERENCES PHOTO_OF_USER(ID_PHOTO_OF_USER)
    MATCH SIMPLE
;
    
ALTER TABLE RECIPE_STEP_SUCCESSFUL
    ADD    FOREIGN KEY (ID_RECIPE_STEP)
    REFERENCES RECIPE_STEP(ID_RECIPE_STEP)
    MATCH SIMPLE
;
    
ALTER TABLE RECIPE_STEP_SUCCESSFUL
    ADD    FOREIGN KEY (ID_MEMBER)
    REFERENCES MEMBER(ID_MEMBER)
    MATCH SIMPLE
;
    
ALTER TABLE MEMBER
    ADD    FOREIGN KEY (LEVEL)
    REFERENCES LEVEL(ID_LEVEL)
    MATCH SIMPLE
;
    
ALTER TABLE LEVEL
    ADD    FOREIGN KEY (LEVEL_PIC)
    REFERENCES PHOTO_OF_LEVEL(ID_PHOTO_OF_LEVEL)
    MATCH SIMPLE
;
    
ALTER TABLE PHOTO_OF_LEVEL
    ADD    FOREIGN KEY (ID_PHOTO_OF_LEVEL)
    REFERENCES PHOTO(ID_PHOTO)
    MATCH SIMPLE
;
    
ALTER TABLE USTENSILE_IN_RECIPE
    ADD    FOREIGN KEY (FK_USTENSILE)
    REFERENCES USTENSILE(ID_USTENSILE)
    MATCH SIMPLE
;
    
ALTER TABLE USTENSILE_IN_RECIPE
    ADD    FOREIGN KEY (FK_ID_RECIPE)
    REFERENCES RECIPE(ID_RECIPE)
    MATCH SIMPLE
;
    





-- Alter constraints
ALTER TABLE NOTE
    ADD CONSTRAINT note_unique_member_recipe UNIQUE(FK_ID_MEMBER,FK_ID_RECIPE)
;

ALTER TABLE RECIPE_STEP_SUCCESSFUL
    ADD CONSTRAINT recipe_step_successful_unique UNIQUE (ID_MEMBER,ID_RECIPE_STEP)
;
